TMS320C2000 Assembler PC v6.2.7 Thu Jul 02 08:31:24 2015

Tools Copyright (c) 1996-2014 Texas Instruments Incorporated
../DSP2833x_headers/source/DSP2833x_usDelay.asm                      PAGE    1

       1              ;// TI File $Revision: /main/4 $
       2              ;// Checkin $Date: July 30, 2007   10:28:57 $
       3              ;//###########################################################################
       4              ;//
       5              ;// FILE:  DSP2833x_usDelay.asm
       6              ;//
       7              ;// TITLE: Simple delay function
       8              ;//
       9              ;// DESCRIPTION:
      10              ;//  
      11              ;// This is a simple delay function that can be used to insert a specified
      12              ;// delay into code.  
      13              ;// 
      14              ;// This function is only accurate if executed from internal zero-waitstate
      15              ;// SARAM. If it is executed from waitstate memory then the delay will be
      16              ;// longer then specified. 
      17              ;// 
      18              ;// To use this function:
      19              ;//
      20              ;//  1 - update the CPU clock speed in the DSP2833x_Examples.h
      21              ;//    file. For example:
      22              ;//    #define CPU_RATE 6.667L // for a 150MHz CPU clock speed
      23              ;//    or #define CPU_RATE 10.000L // for a 100MHz CPU clock speed 
      24              ;//
      25              ;//  2 - Call this function by using the DELAY_US(A) macro
      26              ;//    that is defined in the DSP2833x_Examples.h file.  This macro
      27              ;//    will convert the number of microseconds specified
      28              ;//    into a loop count for use with this function.  
      29              ;//    This count will be based on the CPU frequency you specify.
      30              ;//
      31              ;//  3 - For the most accurate delay 
      32              ;//    - Execute this function in 0 waitstate RAM.  
      33              ;//    - Disable interrupts before calling the function
      34              ;//      If you do not disable interrupts, then think of
      35              ;//      this as an "at least" delay function as the actual
      36              ;//      delay may be longer. 
      37              ;//
      38              ;//  The C assembly call from the DELAY_US(time) macro will
      39              ;//  look as follows: 
      40              ;//
      41              ;//  extern void Delay(long LoopCount);                
      42              ;//
      43              ;//        MOV   AL,#LowLoopCount
      44              ;//        MOV   AH,#HighLoopCount
      45              ;//        LCR   _Delay
      46              ;//
      47              ;//  Or as follows (if count is less then 16-bits):
      48              ;//
      49              ;//        MOV   ACC,#LoopCount
      50              ;//        LCR   _Delay
      51              ;//
      52              ;//
      53              ;//###########################################################################
      54              ;// $TI Release: 2833x/2823x Header Files and Peripheral Examples V133 $
      55              ;// $Release Date: June 8, 2012 $
TMS320C2000 Assembler PC v6.2.7 Thu Jul 02 08:31:24 2015

Tools Copyright (c) 1996-2014 Texas Instruments Incorporated
../DSP2833x_headers/source/DSP2833x_usDelay.asm                      PAGE    2

      56              ;//###########################################################################  
      57              
      58        7025  WDKEY   .set    0x7025
      59              
      60                     .def _usDelay
      61                     ;.sect "ramfuncs"
      62 00000000              .text
      63              
      64                      .global  _usDelay
      65 00000000       _usDelay:
      66 00000000       _DSP28x_usDelay:
      67 00000000 9B00                  MOVB AH, #0                   ;Zero AH
      68 00000001 7608          PUSH ST1                      ;Save ST1 to preserve EALLOW setting
      69              
      70 00000002       DelayUs1:                             ;Outer loop
      71              
      72              ;Service the watchdog in case it is active
      73 00000002 7622          EALLOW
      74 00000003 B9C0          MOVZ DP, #(WDKEY>>6)
      75 00000004 2825          MOV @WDKEY, #0x0055
         00000005 0055 
      76 00000006 2825          MOV @WDKEY, #0x00AA
         00000007 00AA 
      77 00000008 761A          EDIS
      78              
      79              ;Proceed with the inner loop
      80 00000009 F68A          RPT #138                      ;Inner loop
      81 0000000a 7700       || NOP
      82              
      83 0000000b 1901          SUBB ACC,#1                   ;Decrement outer loop counter
      84 0000000c 56C2          BF DelayUs1, GT               ;Branch for outer loop
         0000000d FFF6 
      85              
      86              ;Finish up
      87 0000000e 7600          POP ST1                       ;Restore ST1
      88 0000000f 0006          LRETR                         ;Return
      89              
      90              ;There is a 9/10 cycle overhead and each loop
      91              ;takes five cycles. The LoopCount is given by
      92              ;the following formula:
      93              ;  DELAY_CPU_CYCLES = 9 + 5*LoopCount
      94              ; LoopCount = (DELAY_CPU_CYCLES - 9) / 5
      95              ; The macro DELAY_US(A) performs this calculation for you
      96              ;
      97              ;//===========================================================================
      98              ;// End of file.
      99              ;//===========================================================================
     100              
     101                   .end

No Assembly Errors, No Assembly Warnings
